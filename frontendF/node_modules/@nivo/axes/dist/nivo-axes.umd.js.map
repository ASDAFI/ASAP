{"version":3,"file":"nivo-axes.umd.js","sources":["../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: typeof value === 'number' || typeof value === 'string' ? value : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map(value => ({\n                  key: `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map(value => ({\n                  key: `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"names":["computeCartesianTicks","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","x","y","top","bottom","left","right","ticks","map","value","key","getFormatter","format","type","formatter","timeFormat","Date","d3Format","computeGridLines","width","height","_values","Array","isArray","undefined","lines","x1","x2","y1","y2","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","_jsx","dominantBaseline","textTransform","memoizedAxis","length","renderTick","AxisTick","legend","legendPosition","legendOffset","ariaHidden","formatValue","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","transition","useTransition","keys","tick","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","createElement","rotate","domain","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","func","node","bool","axisPropType","shape","positions","Axes","xScale","yScale","axes","isXAxis","Axis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_format","save","font","fontWeight","fontSize","fontFamily","strokeWidth","lineWidth","Number","lineCap","stroke","strokeStyle","beginPath","moveTo","lineTo","forEach","degreesToRadians","fill","fillStyle","fillText","String","restore"],"mappings":"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"}