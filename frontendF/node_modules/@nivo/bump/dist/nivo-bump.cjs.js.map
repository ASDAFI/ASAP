{"version":3,"file":"nivo-bump.cjs.js","sources":["../src/bump/compute.ts","../src/bump/hooks.ts","../src/bump/Point.tsx","../src/bump/defaults.ts","../src/bump/LineTooltip.tsx","../src/bump/Line.tsx","../src/bump/LinesLabels.tsx","../src/bump/Points.tsx","../src/bump/Bump.tsx","../src/area-bump/hooks.ts","../src/area-bump/compute.ts","../src/area-bump/Area.tsx","../src/area-bump/AreasLabels.tsx","../src/area-bump/defaults.ts","../src/area-bump/AreaTooltip.tsx","../src/area-bump/AreaBump.tsx","../src/area-bump/ResponsiveAreaBump.tsx","../src/bump/ResponsiveBump.tsx"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activeSerieIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(point)\n            if (activeSerieIds.includes(point.serie.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activeSerieIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // @ts-ignore\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, activeSerieIds])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { ModernMotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: ModernMotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { BumpCommonProps, BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { BumpDatum, BumpPoint, BumpPointComponent, BumpSerieExtraProps } from './types'\n\ninterface PointsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport const Points = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    pointComponent,\n}: PointsProps<Datum, ExtraProps>) => (\n    <>\n        {points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )}\n    </>\n)\n","import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpSerieExtraProps,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Points } from './Points'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = bumpSvgDefaultProps.tooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, points, xScale, yScale, lineGenerator, activeSerieIds, setActiveSerieIds } =\n        useBump<Datum, ExtraProps>({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            interpolation,\n            xPadding,\n            xOuterPadding,\n            yOuterPadding,\n            lineWidth,\n            activeLineWidth,\n            inactiveLineWidth,\n            colors,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            pointSize,\n            activePointSize,\n            inactivePointSize,\n            pointColor,\n            pointBorderWidth,\n            activePointBorderWidth,\n            inactivePointBorderWidth,\n            pointBorderColor,\n            isInteractive,\n            defaultActiveSerieIds,\n        })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = (\n            <Points<Datum, ExtraProps>\n                key=\"points\"\n                pointComponent={pointComponent}\n                points={points}\n            />\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            setActiveSerieIds,\n        }),\n        [\n            activeSerieIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useMemo, useCallback, useState } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { ModernMotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: ModernMotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpSerieExtraProps, BumpSvgProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: Omit<BumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useSerieDerivedProp","instruction","useMemo","useBump","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","useState","activeSerieIds","setActiveSerieIds","xValuesSet","Set","yValuesSet","forEach","serie","datum","add","x","y","xValues","Array","from","xScale","castPointScale","scalePoint","domain","range","padding","yValues","sort","a","b","yScale","linePointPadding","step","Math","min","series","map","rawSerie","id","points","linePoints","i","point","push","length","filter","computeSeries","rawSeries","lineGenerator","d3Line","curve","curveBasis","curveLinear","defined","d","useLineGenerator","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","includes","useSerieStyle","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","usePointStyle","pts","rawPoint","isActive","isInactive","borderColor","useBumpSerieHandlers","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","undefined","useBumpSeriesLabels","position","getLabel","textAnchor","signedPadding","labels","label","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","_jsx","BasicTooltip","enableChip","role","pointComponent","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","animated","circle","cx","cy","r","to","v","max","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","linePath","animatedPath","useAnimatedPath","_jsxs","path","strokeLinecap","strokeOpacity","LinesLabels","springs","useSprings","index","text","dominantBaseline","Points","key","InnerBump","partialMargin","margin","axisRight","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","grid","axes","lines","Grid","Axes","top","right","bottom","left","Fragment","customLayerProps","SvgWrapper","layer","Bump","renderWrapper","otherProps","Container","useAreaBumpSeries","align","spacing","maxSum","maxValues","slices","Map","has","set","total","values","slice","get","serieId","value","beforeHeight","keys","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","all","previousValues","_i","pos","beforeValue","reduce","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBump","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","areaGenerator","d3Area","useAreaGenerator","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","useAreaBumpSerieHandlers","useAreaBumpSeriesLabels","Area","blendMode","mixBlendMode","AreasLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","props","ResponsiveWrapper"],"mappings":"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"}