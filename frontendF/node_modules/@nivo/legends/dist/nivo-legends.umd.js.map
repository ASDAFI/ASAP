{"version":3,"file":"nivo-legends.umd.js","sources":["../src/svg/symbols/SymbolCircle.tsx","../src/svg/symbols/SymbolDiamond.tsx","../src/svg/symbols/SymbolSquare.tsx","../src/svg/symbols/SymbolTriangle.tsx","../src/defaults.ts","../src/compute.ts","../src/svg/ContinuousColorsLegendSvg.tsx","../src/svg/LegendSvgItem.tsx","../src/svg/LegendSvg.tsx","../src/canvas.ts","../src/props.ts","../src/svg/AnchoredContinuousColorsLegendSvg.tsx","../src/svg/BoxLegendSvg.tsx","../src/hooks.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],"names":["SymbolCircle","x","y","size","fill","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","SymbolDiamond","transform","d","SymbolSquare","width","height","SymbolTriangle","continuousColorsLegendDefaults","length","thickness","direction","tickPosition","tickSize","tickSpacing","tickOverlap","tickFormat","value","titleAlign","titleOffset","zeroPadding","top","right","bottom","left","computeDimensions","item","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","computeContinuousColorsLegend","values","scale","ticks","title","domain","reverse","positionScale","scaleLinear","range","thresholds","titleX","titleY","titleRotation","titleVerticalAlign","colorStops","computeContinuousColorScaleColorStops","formatValue","getValueFormatter","computedTicks","gradientY1","gradientX2","y1","y2","textY","textVerticalAlign","forEach","push","x1","x2","text","textX","textHorizontalAlign","gradientX1","gradientY2","titleText","titleHorizontalAlign","ContinuousColorsLegendSvg","theme","useTheme","id","map","stop","offset","join","_jsxs","colorStop","textAnchor","dominantBaseline","legends","tick","index","Fragment","line","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","undefined","SymbolShape","itemOpacity","itemBackground","cursor","React","createElement","color","hidden","symbol","itemTextColor","userSelect","label","LegendSvg","itemDirection","xStep","yStep","i","textAlignMapping","start","middle","end","LegendPropShape","PropTypes","arrayOf","object","oneOf","isRequired","number","string","oneOfType","func","shape","legendProps","ctx","_ticks","initialStyles","font","textAlign","textBaseline","save","translate","gradient","createLinearGradient","addColorStop","stopColor","fillStyle","fillRect","fontWeight","fontSize","fontFamily","lineWidth","Number","axis","strokeStyle","lineCap","beginPath","moveTo","lineTo","fillText","rotate","degreesToRadians","restore","itemX","itemY","String","overriddenDomain","valueFormat","v","separator","useMemo","items","domainValue","invertExtent","extent"],"mappings":"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"}