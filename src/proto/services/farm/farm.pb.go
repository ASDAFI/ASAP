// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: services/farm.proto

package farm

import (
	context "context"
	device "farm/src/proto/messages/device"
	log "farm/src/proto/messages/log"
	user "farm/src/proto/messages/user"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_services_farm_proto protoreflect.FileDescriptor

var file_services_farm_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe5,
	0x06, 0x0a, 0x0a, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x06, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x45, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x0d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x22, 0x0e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6c,
	0x6f, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x42, 0x1e, 0x5a, 0x1c, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_services_farm_proto_goTypes = []interface{}{
	(*user.LoginRequest)(nil),                     // 0: messages.user.LoginRequest
	(*empty.Empty)(nil),                           // 1: google.protobuf.Empty
	(*device.CreateDeviceRequest)(nil),            // 2: messages.device.CreateDeviceRequest
	(*device.GetDeviceByIdRequest)(nil),           // 3: messages.device.GetDeviceByIdRequest
	(*device.GetDeviceBySerialRequest)(nil),       // 4: messages.device.GetDeviceBySerialRequest
	(*log.GetDeviceDataFrameBySerialRequest)(nil), // 5: messages.log.GetDeviceDataFrameBySerialRequest
	(*log.GetDeviceDataFrameByIdRequest)(nil),     // 6: messages.log.GetDeviceDataFrameByIdRequest
	(*user.LoginResponse)(nil),                    // 7: messages.user.LoginResponse
	(*user.User)(nil),                             // 8: messages.user.User
	(*device.CreateDeviceResponse)(nil),           // 9: messages.device.CreateDeviceResponse
	(*device.Device)(nil),                         // 10: messages.device.Device
	(*device.Devices)(nil),                        // 11: messages.device.Devices
	(*log.DeviceDataFrame)(nil),                   // 12: messages.log.DeviceDataFrame
}
var file_services_farm_proto_depIdxs = []int32{
	0,  // 0: service.farm.FarmServer.Login:input_type -> messages.user.LoginRequest
	1,  // 1: service.farm.FarmServer.GetUser:input_type -> google.protobuf.Empty
	2,  // 2: service.farm.FarmServer.CreateDevice:input_type -> messages.device.CreateDeviceRequest
	3,  // 3: service.farm.FarmServer.GetDeviceById:input_type -> messages.device.GetDeviceByIdRequest
	4,  // 4: service.farm.FarmServer.GetDeviceBySerial:input_type -> messages.device.GetDeviceBySerialRequest
	1,  // 5: service.farm.FarmServer.GetDevices:input_type -> google.protobuf.Empty
	5,  // 6: service.farm.FarmServer.GetDeviceDataFrameBySerial:input_type -> messages.log.GetDeviceDataFrameBySerialRequest
	6,  // 7: service.farm.FarmServer.GetDeviceDataFrameById:input_type -> messages.log.GetDeviceDataFrameByIdRequest
	7,  // 8: service.farm.FarmServer.Login:output_type -> messages.user.LoginResponse
	8,  // 9: service.farm.FarmServer.GetUser:output_type -> messages.user.User
	9,  // 10: service.farm.FarmServer.CreateDevice:output_type -> messages.device.CreateDeviceResponse
	10, // 11: service.farm.FarmServer.GetDeviceById:output_type -> messages.device.Device
	10, // 12: service.farm.FarmServer.GetDeviceBySerial:output_type -> messages.device.Device
	11, // 13: service.farm.FarmServer.GetDevices:output_type -> messages.device.Devices
	12, // 14: service.farm.FarmServer.GetDeviceDataFrameBySerial:output_type -> messages.log.DeviceDataFrame
	12, // 15: service.farm.FarmServer.GetDeviceDataFrameById:output_type -> messages.log.DeviceDataFrame
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_services_farm_proto_init() }
func file_services_farm_proto_init() {
	if File_services_farm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_farm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_farm_proto_goTypes,
		DependencyIndexes: file_services_farm_proto_depIdxs,
	}.Build()
	File_services_farm_proto = out.File
	file_services_farm_proto_rawDesc = nil
	file_services_farm_proto_goTypes = nil
	file_services_farm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FarmServerClient is the client API for FarmServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FarmServerClient interface {
	Login(ctx context.Context, in *user.LoginRequest, opts ...grpc.CallOption) (*user.LoginResponse, error)
	GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*user.User, error)
	CreateDevice(ctx context.Context, in *device.CreateDeviceRequest, opts ...grpc.CallOption) (*device.CreateDeviceResponse, error)
	GetDeviceById(ctx context.Context, in *device.GetDeviceByIdRequest, opts ...grpc.CallOption) (*device.Device, error)
	GetDeviceBySerial(ctx context.Context, in *device.GetDeviceBySerialRequest, opts ...grpc.CallOption) (*device.Device, error)
	GetDevices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*device.Devices, error)
	GetDeviceDataFrameBySerial(ctx context.Context, in *log.GetDeviceDataFrameBySerialRequest, opts ...grpc.CallOption) (*log.DeviceDataFrame, error)
	GetDeviceDataFrameById(ctx context.Context, in *log.GetDeviceDataFrameByIdRequest, opts ...grpc.CallOption) (*log.DeviceDataFrame, error)
}

type farmServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFarmServerClient(cc grpc.ClientConnInterface) FarmServerClient {
	return &farmServerClient{cc}
}

func (c *farmServerClient) Login(ctx context.Context, in *user.LoginRequest, opts ...grpc.CallOption) (*user.LoginResponse, error) {
	out := new(user.LoginResponse)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*user.User, error) {
	out := new(user.User)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) CreateDevice(ctx context.Context, in *device.CreateDeviceRequest, opts ...grpc.CallOption) (*device.CreateDeviceResponse, error) {
	out := new(device.CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetDeviceById(ctx context.Context, in *device.GetDeviceByIdRequest, opts ...grpc.CallOption) (*device.Device, error) {
	out := new(device.Device)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetDeviceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetDeviceBySerial(ctx context.Context, in *device.GetDeviceBySerialRequest, opts ...grpc.CallOption) (*device.Device, error) {
	out := new(device.Device)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetDeviceBySerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetDevices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*device.Devices, error) {
	out := new(device.Devices)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetDeviceDataFrameBySerial(ctx context.Context, in *log.GetDeviceDataFrameBySerialRequest, opts ...grpc.CallOption) (*log.DeviceDataFrame, error) {
	out := new(log.DeviceDataFrame)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetDeviceDataFrameBySerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *farmServerClient) GetDeviceDataFrameById(ctx context.Context, in *log.GetDeviceDataFrameByIdRequest, opts ...grpc.CallOption) (*log.DeviceDataFrame, error) {
	out := new(log.DeviceDataFrame)
	err := c.cc.Invoke(ctx, "/service.farm.FarmServer/GetDeviceDataFrameById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FarmServerServer is the server API for FarmServer service.
type FarmServerServer interface {
	Login(context.Context, *user.LoginRequest) (*user.LoginResponse, error)
	GetUser(context.Context, *empty.Empty) (*user.User, error)
	CreateDevice(context.Context, *device.CreateDeviceRequest) (*device.CreateDeviceResponse, error)
	GetDeviceById(context.Context, *device.GetDeviceByIdRequest) (*device.Device, error)
	GetDeviceBySerial(context.Context, *device.GetDeviceBySerialRequest) (*device.Device, error)
	GetDevices(context.Context, *empty.Empty) (*device.Devices, error)
	GetDeviceDataFrameBySerial(context.Context, *log.GetDeviceDataFrameBySerialRequest) (*log.DeviceDataFrame, error)
	GetDeviceDataFrameById(context.Context, *log.GetDeviceDataFrameByIdRequest) (*log.DeviceDataFrame, error)
}

// UnimplementedFarmServerServer can be embedded to have forward compatible implementations.
type UnimplementedFarmServerServer struct {
}

func (*UnimplementedFarmServerServer) Login(context.Context, *user.LoginRequest) (*user.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedFarmServerServer) GetUser(context.Context, *empty.Empty) (*user.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedFarmServerServer) CreateDevice(context.Context, *device.CreateDeviceRequest) (*device.CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedFarmServerServer) GetDeviceById(context.Context, *device.GetDeviceByIdRequest) (*device.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceById not implemented")
}
func (*UnimplementedFarmServerServer) GetDeviceBySerial(context.Context, *device.GetDeviceBySerialRequest) (*device.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBySerial not implemented")
}
func (*UnimplementedFarmServerServer) GetDevices(context.Context, *empty.Empty) (*device.Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (*UnimplementedFarmServerServer) GetDeviceDataFrameBySerial(context.Context, *log.GetDeviceDataFrameBySerialRequest) (*log.DeviceDataFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDataFrameBySerial not implemented")
}
func (*UnimplementedFarmServerServer) GetDeviceDataFrameById(context.Context, *log.GetDeviceDataFrameByIdRequest) (*log.DeviceDataFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDataFrameById not implemented")
}

func RegisterFarmServerServer(s *grpc.Server, srv FarmServerServer) {
	s.RegisterService(&_FarmServer_serviceDesc, srv)
}

func _FarmServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).Login(ctx, req.(*user.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).CreateDevice(ctx, req.(*device.CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetDeviceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.GetDeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetDeviceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetDeviceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetDeviceById(ctx, req.(*device.GetDeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetDeviceBySerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(device.GetDeviceBySerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetDeviceBySerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetDeviceBySerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetDeviceBySerial(ctx, req.(*device.GetDeviceBySerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetDevices(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetDeviceDataFrameBySerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(log.GetDeviceDataFrameBySerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetDeviceDataFrameBySerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetDeviceDataFrameBySerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetDeviceDataFrameBySerial(ctx, req.(*log.GetDeviceDataFrameBySerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FarmServer_GetDeviceDataFrameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(log.GetDeviceDataFrameByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FarmServerServer).GetDeviceDataFrameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.farm.FarmServer/GetDeviceDataFrameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FarmServerServer).GetDeviceDataFrameById(ctx, req.(*log.GetDeviceDataFrameByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FarmServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.farm.FarmServer",
	HandlerType: (*FarmServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _FarmServer_Login_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _FarmServer_GetUser_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _FarmServer_CreateDevice_Handler,
		},
		{
			MethodName: "GetDeviceById",
			Handler:    _FarmServer_GetDeviceById_Handler,
		},
		{
			MethodName: "GetDeviceBySerial",
			Handler:    _FarmServer_GetDeviceBySerial_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _FarmServer_GetDevices_Handler,
		},
		{
			MethodName: "GetDeviceDataFrameBySerial",
			Handler:    _FarmServer_GetDeviceDataFrameBySerial_Handler,
		},
		{
			MethodName: "GetDeviceDataFrameById",
			Handler:    _FarmServer_GetDeviceDataFrameById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/farm.proto",
}
